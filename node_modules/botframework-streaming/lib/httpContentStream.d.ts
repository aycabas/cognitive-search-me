import { IHttpContentHeaders } from './interfaces';
import type { SubscribableStream } from './subscribableStream';
/**
 * An attachment contained within a StreamingRequest's stream collection, which itself contains any form of media item.
 */
export declare class HttpContentStream {
    readonly content: HttpContent;
    readonly id: string;
    description: {
        id: string;
        type: string;
        length: number;
    };
    /**
     * Initializes a new instance of the [HttpContentStream](xref:botframework-streaming.HttpContentStream) class.
     *
     * @param content The [HttpContent](xref:botframework-streaming.HttpContent) to assign to the [HttpContentStream](xref:botframework-streaming.HttpContentStream).
     */
    constructor(content: HttpContent);
}
/**
 * The HttpContent class that contains a [SubscribableStream](xref:botframework-streaming.SubscribableStream).
 */
export declare class HttpContent {
    headers: IHttpContentHeaders;
    private readonly stream;
    /**
     * Initializes a new instance of the [HttpContent](xref:botframework-streaming.HttpContent) class.
     *
     * @param headers The Streaming Http content header definition.
     * @param stream The stream of buffered data.
     */
    constructor(headers: IHttpContentHeaders, stream: SubscribableStream);
    /**
     * Gets the data contained within this [HttpContent](xref:botframework-streaming.HttpContent).
     *
     * @returns This [HttpContent's](xref:botframework-streaming.HttpContent) [SubscribableStream](xref:botframework-streaming.SubscribableStream) member.
     */
    getStream(): SubscribableStream;
}
//# sourceMappingURL=httpContentStream.d.ts.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpContentStreamDisassembler = void 0;
const payloadDisassembler_1 = require("./payloadDisassembler");
const payloads_1 = require("../payloads");
/**
 * Disassembler for Http content stream
 */
class HttpContentStreamDisassembler extends payloadDisassembler_1.PayloadDisassembler {
    /**
     * Initializes a new instance of the [HttpContentStreamDisassembler](xref:botframework-streaming.HttpContentStreamDisassembler) class.
     *
     * @param sender The [PayloadSender](xref:botframework-streaming.PayloadSender) to send the disassembled data to.
     * @param contentStream The [HttpContentStream](xref:botframework-streaming.HttpContentStream) to be disassembled.
     */
    constructor(sender, contentStream) {
        super(sender, contentStream.id);
        this.payloadType = payloads_1.PayloadTypes.stream;
        this.contentStream = contentStream;
    }
    /**
     * Gets the stream this disassembler is operating on.
     *
     * @returns An [IStreamWrapper](xref:botframework-streaming.IStreamWrapper) with a Subscribable Strea.
     */
    getStream() {
        return __awaiter(this, void 0, void 0, function* () {
            const stream = this.contentStream.content.getStream();
            return { stream, streamLength: stream.length };
        });
    }
}
exports.HttpContentStreamDisassembler = HttpContentStreamDisassembler;
//# sourceMappingURL=httpContentStreamDisassembler.js.map
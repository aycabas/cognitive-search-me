/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { PayloadSender } from '../payloadTransport/payloadSender';
import { StreamingRequest } from '../streamingRequest';
import { StreamingResponse } from '../streamingResponse';
/**
 * Send operations for streaming payloads.
 */
export declare class SendOperations {
    private readonly payloadSender;
    /**
     * Initializes a new instance of the [SendOperations](xref:botframework-streaming.SendOperations) class.
     *
     * @param payloadSender The [PayloadSender](xref:botframework-streaming.PayloadSender) that will send the disassembled data from all of this instance's send operations.
     */
    constructor(payloadSender: PayloadSender);
    /**
     * The send operation used to send a [StreamingRequest](xref:botframework-streaming.StreamingRequest).
     *
     * @param id The ID to assign to the [RequestDisassembler](xref:botframework-streaming.RequestDisassembler) used by this operation.
     * @param request The request to send.
     */
    sendRequest(id: string, request: StreamingRequest): Promise<void>;
    /**
     * The send operation used to send a [PayloadTypes.response](xref:botframework-streaming.PayloadTypes.response).
     *
     * @param id The ID to assign to the [ResponseDisassembler](xref:botframework-streaming.ResponseDisassembler) used by this operation.
     * @param response The response to send.
     */
    sendResponse(id: string, response: StreamingResponse): Promise<void>;
    /**
     * The send operation used to send a [PayloadTypes.cancelStream](xref:botframework-streaming.PayloadTypes.cancelStream).
     *
     * @param id The ID to assign to the [CancelDisassembler](xref:botframework-streaming.CancelDisassembler) used by this operation.
     */
    sendCancelStream(id: string): Promise<void>;
}
//# sourceMappingURL=sendOperations.d.ts.map

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./helpers/util");
exports.ZodErrorCode = util_1.util.arrayToEnum([
    'invalid_type',
    'nonempty_array_is_empty',
    'custom_error',
    'invalid_union',
    'invalid_literal_value',
    'invalid_enum_value',
    'unrecognized_keys',
    'invalid_arguments',
    'invalid_return_type',
    'invalid_date',
    'invalid_string',
    'too_small',
    'too_big',
]);
exports.quotelessJson = function (obj) {
    var json = JSON.stringify(obj, null, 2); // {"name":"John Smith"}
    return json.replace(/"([^"]+)":/g, '$1:');
};
var ZodError = /** @class */ (function (_super) {
    __extends(ZodError, _super);
    function ZodError(errors) {
        var _newTarget = this.constructor;
        var _this = _super.call(this) || this;
        _this.errors = [];
        _this.addError = function (sub) {
            _this.errors = _this.errors.concat([sub]);
        };
        _this.addErrors = function (subs) {
            if (subs === void 0) { subs = []; }
            _this.errors = _this.errors.concat(subs);
        };
        _this.flatten = function () {
            var fieldErrors = {};
            var formErrors = [];
            for (var _i = 0, _a = _this.errors; _i < _a.length; _i++) {
                var sub = _a[_i];
                if (sub.path.length > 0) {
                    fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                    fieldErrors[sub.path[0]].push(sub.message);
                }
                else {
                    formErrors.push(sub.message);
                }
            }
            return { formErrors: formErrors, fieldErrors: fieldErrors };
        };
        // restore prototype chain
        var actualProto = _newTarget.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(_this, actualProto);
        }
        else {
            _this.__proto__ = actualProto;
        }
        _this.errors = errors;
        return _this;
    }
    Object.defineProperty(ZodError.prototype, "message", {
        get: function () {
            // return JSON.stringify(this.errors, null, 2);
            var errorMessage = [
                this.errors.length + " validation issue(s)",
                '',
            ];
            for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
                var err = _a[_i];
                var pathString = err.path.join('.') || '[[root]]';
                errorMessage.push("  Issue #" + this.errors.indexOf(err) + ": " + err.code + " at " + pathString);
                errorMessage.push("  " + err.message);
                errorMessage.push('');
            }
            return errorMessage.join('\n');
            // return quotelessJson(this);
            // .map(({ path, message }) => {
            //   return path.length ? `${path.join('./index')}: ${message}` : `${message}`;
            // })
            // .join('\n');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodError.prototype, "isEmpty", {
        get: function () {
            return this.errors.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZodError.prototype, "formErrors", {
        get: function () {
            return this.flatten();
        },
        enumerable: true,
        configurable: true
    });
    ZodError.create = function (errors) {
        var error = new ZodError(errors);
        return error;
    };
    return ZodError;
}(Error));
exports.ZodError = ZodError;
//# sourceMappingURL=ZodError.js.map
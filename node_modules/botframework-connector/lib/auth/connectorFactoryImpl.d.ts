import { ConnectorClient } from '../connectorApi/connectorClient';
import { ConnectorClientOptions } from '../connectorApi/models';
import { ConnectorFactory } from './connectorFactory';
import type { ServiceClientCredentialsFactory } from './serviceClientCredentialsFactory';
export declare const USER_AGENT: string;
/**
 * @internal
 * Implementation of [ConnectorFactory](xref:botframework-connector.ConnectorFactory).
 */
export declare class ConnectorFactoryImpl extends ConnectorFactory {
    private readonly appId;
    private readonly toChannelFromBotOAuthScope;
    private readonly loginEndpoint;
    private readonly validateAuthority;
    private readonly credentialFactory;
    private readonly connectorClientOptions;
    /**
     * @param appId The AppID.
     * @param toChannelFromBotOAuthScope The to Channel from bot oauth scope.
     * @param loginEndpoint The login url.
     * @param validateAuthority The validate authority value to use.
     * @param credentialFactory A ServiceClientCredentialsFactory to use.
     * @param connectorClientOptions The [ConnectorClientOptions](xref:botframework-connector.ConnectorClientOptions) to use when creating ConnectorClients.
     */
    constructor(appId: string, toChannelFromBotOAuthScope: string, loginEndpoint: string, validateAuthority: boolean, credentialFactory: ServiceClientCredentialsFactory, connectorClientOptions?: ConnectorClientOptions);
    /**
     * @param serviceUrl The client's service URL.
     * @param audience The audience to use for outbound communication. It will vary by cloud environment.
     * @returns The new instance of the ConnectorClient class.
     */
    create(serviceUrl: string, audience?: string): Promise<ConnectorClient>;
    private getClientOptions;
}
//# sourceMappingURL=connectorFactoryImpl.d.ts.map
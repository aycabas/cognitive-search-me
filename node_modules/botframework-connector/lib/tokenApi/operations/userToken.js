"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserToken = void 0;
const msRest = require("@azure/ms-rest-js");
const Mappers = require("../models/userTokenMappers");
const Parameters = require("../models/parameters");
/** Class representing a UserToken. */
class UserToken {
    /**
     * Create a UserToken.
     *
     * @param {TokenApiClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    getToken(userId, connectionName, options, callback) {
        return this.client.sendOperationRequest({
            userId,
            connectionName,
            options,
        }, getTokenOperationSpec, callback);
    }
    getAadTokens(userId, connectionName, aadResourceUrls, options, callback) {
        return this.client.sendOperationRequest({
            userId,
            connectionName,
            aadResourceUrls,
            options,
        }, getAadTokensOperationSpec, callback);
    }
    signOut(userId, options, callback) {
        return this.client.sendOperationRequest({
            userId,
            options,
        }, signOutOperationSpec, callback);
    }
    getTokenStatus(userId, options, callback) {
        return this.client.sendOperationRequest({
            userId,
            options,
        }, getTokenStatusOperationSpec, callback);
    }
    exchangeAsync(userId, connectionName, channelId, exchangeRequest, options, callback) {
        return this.client.sendOperationRequest({
            userId,
            connectionName,
            channelId,
            exchangeRequest,
            options,
        }, exchangeAsyncOperationSpec, callback);
    }
}
exports.UserToken = UserToken;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getTokenOperationSpec = {
    httpMethod: 'GET',
    path: 'api/usertoken/GetToken',
    queryParameters: [Parameters.userId, Parameters.connectionName0, Parameters.channelId0, Parameters.code],
    responses: {
        200: {
            bodyMapper: Mappers.TokenResponse,
        },
        404: {
            bodyMapper: Mappers.TokenResponse,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    serializer,
};
const getAadTokensOperationSpec = {
    httpMethod: 'POST',
    path: 'api/usertoken/GetAadTokens',
    queryParameters: [Parameters.userId, Parameters.connectionName0, Parameters.channelId0],
    requestBody: {
        parameterPath: 'aadResourceUrls',
        mapper: Object.assign(Object.assign({}, Mappers.AadResourceUrls), { required: true }),
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: 'parsedResponse',
                type: {
                    name: 'Dictionary',
                    value: {
                        type: {
                            name: 'Composite',
                            className: 'TokenResponse',
                        },
                    },
                },
            },
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    serializer,
};
const signOutOperationSpec = {
    httpMethod: 'DELETE',
    path: 'api/usertoken/SignOut',
    queryParameters: [Parameters.userId, Parameters.connectionName1, Parameters.channelId0],
    responses: {
        200: {
            bodyMapper: {
                serializedName: 'parsedResponse',
                type: {
                    name: 'Object',
                },
            },
        },
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    serializer,
};
const getTokenStatusOperationSpec = {
    httpMethod: 'GET',
    path: 'api/usertoken/GetTokenStatus',
    queryParameters: [Parameters.userId, Parameters.channelId0, Parameters.include],
    responses: {
        200: {
            bodyMapper: {
                serializedName: 'parsedResponse',
                type: {
                    name: 'Sequence',
                    element: {
                        type: {
                            name: 'Composite',
                            className: 'TokenStatus',
                        },
                    },
                },
            },
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    serializer,
};
const exchangeAsyncOperationSpec = {
    httpMethod: 'POST',
    path: 'api/usertoken/exchange',
    queryParameters: [Parameters.userId, Parameters.connectionName0, Parameters.channelId1],
    requestBody: {
        parameterPath: 'exchangeRequest',
        mapper: Object.assign(Object.assign({}, Mappers.TokenExchangeRequest), { required: true }),
    },
    responses: {
        200: {
            bodyMapper: Mappers.TokenResponse,
        },
        400: {
            bodyMapper: Mappers.ErrorResponse,
        },
        404: {
            bodyMapper: Mappers.TokenResponse,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    serializer,
};
//# sourceMappingURL=userToken.js.map
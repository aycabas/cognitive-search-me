import { Activity, InvokeResponse } from 'botframework-schema';
import { BotFrameworkClient } from '../skills';
import { ServiceClientCredentialsFactory } from './serviceClientCredentialsFactory';
/**
 * @internal
 * Implementation of [BotFrameworkClient](xref:botframework-connector.BotFrameworkClient).
 */
export declare class BotFrameworkClientImpl implements BotFrameworkClient {
    private readonly credentialsFactory;
    private readonly loginEndpoint;
    private readonly botFrameworkClientFetch;
    /**
     * @param credentialsFactory A [ServiceClientCredentialsFactory](xref:botframework-connector.ServiceClientCredentialsFactory) instance.
     * @param loginEndpoint The login url.
     * @param botFrameworkClientFetch A custom Fetch implementation to be used in the [BotFrameworkClient](xref:botframework-connector.BotFrameworkClient).
     */
    constructor(credentialsFactory: ServiceClientCredentialsFactory, loginEndpoint: string, botFrameworkClientFetch?: typeof fetch);
    /**
     * @template T The type of body in the InvokeResponse.
     * @param fromBotId The MicrosoftAppId of the bot sending the activity.
     * @param toBotId The MicrosoftAppId of the bot receiving the activity.
     * @param toUrl The URL of the bot receiving the activity.
     * @param serviceUrl The callback Url for the skill host.
     * @param conversationId A conversation ID to use for the conversation with the skill.
     * @param activity The Activity to send to forward.
     * @returns {Promise<InvokeResponse<T>>} A promise representing the asynchronous operation.
     */
    postActivity<T>(fromBotId: string, toBotId: string, toUrl: string, serviceUrl: string, conversationId: string, activity: Activity): Promise<InvokeResponse<T>>;
}
//# sourceMappingURL=botFrameworkClientImpl.d.ts.map

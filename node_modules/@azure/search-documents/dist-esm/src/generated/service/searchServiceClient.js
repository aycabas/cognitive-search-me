/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as coreHttpCompat from "@azure/core-http-compat";
import { DataSourcesImpl, IndexersImpl, SkillsetsImpl, SynonymMapsImpl, IndexesImpl, AliasesImpl } from "./operations";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
/** @internal */
export class SearchServiceClient extends coreHttpCompat.ExtendedServiceClient {
    /**
     * Initializes a new instance of the SearchServiceClient class.
     * @param endpoint The endpoint URL of the search service.
     * @param apiVersion Api Version
     * @param options The parameter options
     */
    constructor(endpoint, apiVersion, options) {
        var _a, _b;
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        if (apiVersion === undefined) {
            throw new Error("'apiVersion' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8"
        };
        const packageDetails = `azsdk-js-search-documents/12.0.0-beta.3`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "{endpoint}" });
        super(optionsWithDefaults);
        // Parameter assignments
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.dataSources = new DataSourcesImpl(this);
        this.indexers = new IndexersImpl(this);
        this.skillsets = new SkillsetsImpl(this);
        this.synonymMaps = new SynonymMapsImpl(this);
        this.indexes = new IndexesImpl(this);
        this.aliases = new AliasesImpl(this);
    }
    /**
     * Gets service level statistics for a search service.
     * @param options The options parameters.
     */
    getServiceStatistics(options) {
        return this.sendOperationRequest({ options }, getServiceStatisticsOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getServiceStatisticsOperationSpec = {
    path: "/servicestats",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ServiceStatistics
        },
        default: {
            bodyMapper: Mappers.SearchError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=searchServiceClient.js.map
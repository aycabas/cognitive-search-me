/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ApiVersion20230701Preview} that the service accepts. */
export var KnownApiVersion20230701Preview;
(function (KnownApiVersion20230701Preview) {
    /** Api Version '2023-07-01-Preview' */
    KnownApiVersion20230701Preview["TwoThousandTwentyThree0701Preview"] = "2023-07-01-Preview";
})(KnownApiVersion20230701Preview || (KnownApiVersion20230701Preview = {}));
/** Known values of {@link SemanticErrorHandling} that the service accepts. */
export var KnownSemanticErrorHandling;
(function (KnownSemanticErrorHandling) {
    /** If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure. */
    KnownSemanticErrorHandling["Partial"] = "partial";
    /** If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error. */
    KnownSemanticErrorHandling["Fail"] = "fail";
})(KnownSemanticErrorHandling || (KnownSemanticErrorHandling = {}));
/** Known values of {@link QueryDebugMode} that the service accepts. */
export var KnownQueryDebugMode;
(function (KnownQueryDebugMode) {
    /** No query debugging information will be returned. */
    KnownQueryDebugMode["Disabled"] = "disabled";
    /** Allows the user to further explore their Semantic search results. */
    KnownQueryDebugMode["Semantic"] = "semantic";
})(KnownQueryDebugMode || (KnownQueryDebugMode = {}));
/** Known values of {@link QueryLanguage} that the service accepts. */
export var KnownQueryLanguage;
(function (KnownQueryLanguage) {
    /** Query language not specified. */
    KnownQueryLanguage["None"] = "none";
    /** Query language value for English (United States). */
    KnownQueryLanguage["EnUs"] = "en-us";
    /** Query language value for English (Great Britain). */
    KnownQueryLanguage["EnGb"] = "en-gb";
    /** Query language value for English (India). */
    KnownQueryLanguage["EnIn"] = "en-in";
    /** Query language value for English (Canada). */
    KnownQueryLanguage["EnCa"] = "en-ca";
    /** Query language value for English (Australia). */
    KnownQueryLanguage["EnAu"] = "en-au";
    /** Query language value for French (France). */
    KnownQueryLanguage["FrFr"] = "fr-fr";
    /** Query language value for French (Canada). */
    KnownQueryLanguage["FrCa"] = "fr-ca";
    /** Query language value for German (Germany). */
    KnownQueryLanguage["DeDe"] = "de-de";
    /** Query language value for Spanish (Spain). */
    KnownQueryLanguage["EsEs"] = "es-es";
    /** Query language value for Spanish (Mexico). */
    KnownQueryLanguage["EsMx"] = "es-mx";
    /** Query language value for Chinese (China). */
    KnownQueryLanguage["ZhCn"] = "zh-cn";
    /** Query language value for Chinese (Taiwan). */
    KnownQueryLanguage["ZhTw"] = "zh-tw";
    /** Query language value for Portuguese (Brazil). */
    KnownQueryLanguage["PtBr"] = "pt-br";
    /** Query language value for Portuguese (Portugal). */
    KnownQueryLanguage["PtPt"] = "pt-pt";
    /** Query language value for Italian (Italy). */
    KnownQueryLanguage["ItIt"] = "it-it";
    /** Query language value for Japanese (Japan). */
    KnownQueryLanguage["JaJp"] = "ja-jp";
    /** Query language value for Korean (Korea). */
    KnownQueryLanguage["KoKr"] = "ko-kr";
    /** Query language value for Russian (Russia). */
    KnownQueryLanguage["RuRu"] = "ru-ru";
    /** Query language value for Czech (Czech Republic). */
    KnownQueryLanguage["CsCz"] = "cs-cz";
    /** Query language value for Dutch (Belgium). */
    KnownQueryLanguage["NlBe"] = "nl-be";
    /** Query language value for Dutch (Netherlands). */
    KnownQueryLanguage["NlNl"] = "nl-nl";
    /** Query language value for Hungarian (Hungary). */
    KnownQueryLanguage["HuHu"] = "hu-hu";
    /** Query language value for Polish (Poland). */
    KnownQueryLanguage["PlPl"] = "pl-pl";
    /** Query language value for Swedish (Sweden). */
    KnownQueryLanguage["SvSe"] = "sv-se";
    /** Query language value for Turkish (Turkey). */
    KnownQueryLanguage["TrTr"] = "tr-tr";
    /** Query language value for Hindi (India). */
    KnownQueryLanguage["HiIn"] = "hi-in";
    /** Query language value for Arabic (Saudi Arabia). */
    KnownQueryLanguage["ArSa"] = "ar-sa";
    /** Query language value for Arabic (Egypt). */
    KnownQueryLanguage["ArEg"] = "ar-eg";
    /** Query language value for Arabic (Morocco). */
    KnownQueryLanguage["ArMa"] = "ar-ma";
    /** Query language value for Arabic (Kuwait). */
    KnownQueryLanguage["ArKw"] = "ar-kw";
    /** Query language value for Arabic (Jordan). */
    KnownQueryLanguage["ArJo"] = "ar-jo";
    /** Query language value for Danish (Denmark). */
    KnownQueryLanguage["DaDk"] = "da-dk";
    /** Query language value for Norwegian (Norway). */
    KnownQueryLanguage["NoNo"] = "no-no";
    /** Query language value for Bulgarian (Bulgaria). */
    KnownQueryLanguage["BgBg"] = "bg-bg";
    /** Query language value for Croatian (Croatia). */
    KnownQueryLanguage["HrHr"] = "hr-hr";
    /** Query language value for Croatian (Bosnia and Herzegovina). */
    KnownQueryLanguage["HrBa"] = "hr-ba";
    /** Query language value for Malay (Malaysia). */
    KnownQueryLanguage["MsMy"] = "ms-my";
    /** Query language value for Malay (Brunei Darussalam). */
    KnownQueryLanguage["MsBn"] = "ms-bn";
    /** Query language value for Slovenian (Slovenia). */
    KnownQueryLanguage["SlSl"] = "sl-sl";
    /** Query language value for Tamil (India). */
    KnownQueryLanguage["TaIn"] = "ta-in";
    /** Query language value for Vietnamese (Viet Nam). */
    KnownQueryLanguage["ViVn"] = "vi-vn";
    /** Query language value for Greek (Greece). */
    KnownQueryLanguage["ElGr"] = "el-gr";
    /** Query language value for Romanian (Romania). */
    KnownQueryLanguage["RoRo"] = "ro-ro";
    /** Query language value for Icelandic (Iceland). */
    KnownQueryLanguage["IsIs"] = "is-is";
    /** Query language value for Indonesian (Indonesia). */
    KnownQueryLanguage["IdId"] = "id-id";
    /** Query language value for Thai (Thailand). */
    KnownQueryLanguage["ThTh"] = "th-th";
    /** Query language value for Lithuanian (Lithuania). */
    KnownQueryLanguage["LtLt"] = "lt-lt";
    /** Query language value for Ukrainian (Ukraine). */
    KnownQueryLanguage["UkUa"] = "uk-ua";
    /** Query language value for Latvian (Latvia). */
    KnownQueryLanguage["LvLv"] = "lv-lv";
    /** Query language value for Estonian (Estonia). */
    KnownQueryLanguage["EtEe"] = "et-ee";
    /** Query language value for Catalan (Spain). */
    KnownQueryLanguage["CaEs"] = "ca-es";
    /** Query language value for Finnish (Finland). */
    KnownQueryLanguage["FiFi"] = "fi-fi";
    /** Query language value for Serbian (Bosnia and Herzegovina). */
    KnownQueryLanguage["SrBa"] = "sr-ba";
    /** Query language value for Serbian (Montenegro). */
    KnownQueryLanguage["SrMe"] = "sr-me";
    /** Query language value for Serbian (Serbia). */
    KnownQueryLanguage["SrRs"] = "sr-rs";
    /** Query language value for Slovak (Slovakia). */
    KnownQueryLanguage["SkSk"] = "sk-sk";
    /** Query language value for Norwegian (Norway). */
    KnownQueryLanguage["NbNo"] = "nb-no";
    /** Query language value for Armenian (Armenia). */
    KnownQueryLanguage["HyAm"] = "hy-am";
    /** Query language value for Bengali (India). */
    KnownQueryLanguage["BnIn"] = "bn-in";
    /** Query language value for Basque (Spain). */
    KnownQueryLanguage["EuEs"] = "eu-es";
    /** Query language value for Galician (Spain). */
    KnownQueryLanguage["GlEs"] = "gl-es";
    /** Query language value for Gujarati (India). */
    KnownQueryLanguage["GuIn"] = "gu-in";
    /** Query language value for Hebrew (Israel). */
    KnownQueryLanguage["HeIl"] = "he-il";
    /** Query language value for Irish (Ireland). */
    KnownQueryLanguage["GaIe"] = "ga-ie";
    /** Query language value for Kannada (India). */
    KnownQueryLanguage["KnIn"] = "kn-in";
    /** Query language value for Malayalam (India). */
    KnownQueryLanguage["MlIn"] = "ml-in";
    /** Query language value for Marathi (India). */
    KnownQueryLanguage["MrIn"] = "mr-in";
    /** Query language value for Persian (U.A.E.). */
    KnownQueryLanguage["FaAe"] = "fa-ae";
    /** Query language value for Punjabi (India). */
    KnownQueryLanguage["PaIn"] = "pa-in";
    /** Query language value for Telugu (India). */
    KnownQueryLanguage["TeIn"] = "te-in";
    /** Query language value for Urdu (Pakistan). */
    KnownQueryLanguage["UrPk"] = "ur-pk";
})(KnownQueryLanguage || (KnownQueryLanguage = {}));
/** Known values of {@link Speller} that the service accepts. */
export var KnownSpeller;
(function (KnownSpeller) {
    /** Speller not enabled. */
    KnownSpeller["None"] = "none";
    /** Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter. */
    KnownSpeller["Lexicon"] = "lexicon";
})(KnownSpeller || (KnownSpeller = {}));
/** Known values of {@link Answers} that the service accepts. */
export var KnownAnswers;
(function (KnownAnswers) {
    /** Do not return answers for the query. */
    KnownAnswers["None"] = "none";
    /** Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language. */
    KnownAnswers["Extractive"] = "extractive";
})(KnownAnswers || (KnownAnswers = {}));
/** Known values of {@link Captions} that the service accepts. */
export var KnownCaptions;
(function (KnownCaptions) {
    /** Do not return captions for the query. */
    KnownCaptions["None"] = "none";
    /** Extracts captions from the matching documents that contain passages relevant to the search query. */
    KnownCaptions["Extractive"] = "extractive";
})(KnownCaptions || (KnownCaptions = {}));
/** Known values of {@link QuerySpellerType} that the service accepts. */
export var KnownQuerySpellerType;
(function (KnownQuerySpellerType) {
    /** Speller not enabled. */
    KnownQuerySpellerType["None"] = "none";
    /** Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter. */
    KnownQuerySpellerType["Lexicon"] = "lexicon";
})(KnownQuerySpellerType || (KnownQuerySpellerType = {}));
/** Known values of {@link QueryAnswerType} that the service accepts. */
export var KnownQueryAnswerType;
(function (KnownQueryAnswerType) {
    /** Do not return answers for the query. */
    KnownQueryAnswerType["None"] = "none";
    /** Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language. */
    KnownQueryAnswerType["Extractive"] = "extractive";
})(KnownQueryAnswerType || (KnownQueryAnswerType = {}));
/** Known values of {@link QueryCaptionType} that the service accepts. */
export var KnownQueryCaptionType;
(function (KnownQueryCaptionType) {
    /** Do not return captions for the query. */
    KnownQueryCaptionType["None"] = "none";
    /** Extracts captions from the matching documents that contain passages relevant to the search query. */
    KnownQueryCaptionType["Extractive"] = "extractive";
})(KnownQueryCaptionType || (KnownQueryCaptionType = {}));
/** Known values of {@link SemanticPartialResponseReason} that the service accepts. */
export var KnownSemanticPartialResponseReason;
(function (KnownSemanticPartialResponseReason) {
    /** If 'semanticMaxWaitInMilliseconds' was set and the semantic processing duration exceeded that value. Only the base results were returned. */
    KnownSemanticPartialResponseReason["MaxWaitExceeded"] = "maxWaitExceeded";
    /** The request was throttled. Only the base results were returned. */
    KnownSemanticPartialResponseReason["CapacityOverloaded"] = "capacityOverloaded";
    /** At least one step of the semantic process failed. */
    KnownSemanticPartialResponseReason["Transient"] = "transient";
})(KnownSemanticPartialResponseReason || (KnownSemanticPartialResponseReason = {}));
/** Known values of {@link SemanticPartialResponseType} that the service accepts. */
export var KnownSemanticPartialResponseType;
(function (KnownSemanticPartialResponseType) {
    /** Results without any semantic enrichment or reranking. */
    KnownSemanticPartialResponseType["BaseResults"] = "baseResults";
    /** Results have been reranked with the reranker model and will include semantic captions. They will not include any answers, answers highlights or caption highlights. */
    KnownSemanticPartialResponseType["RerankedResults"] = "rerankedResults";
})(KnownSemanticPartialResponseType || (KnownSemanticPartialResponseType = {}));
/** Known values of {@link SemanticFieldState} that the service accepts. */
export var KnownSemanticFieldState;
(function (KnownSemanticFieldState) {
    /** The field was fully used for semantic enrichment. */
    KnownSemanticFieldState["Used"] = "used";
    /** The field was not used for semantic enrichment. */
    KnownSemanticFieldState["Unused"] = "unused";
    /** The field was partially used for semantic enrichment. */
    KnownSemanticFieldState["Partial"] = "partial";
})(KnownSemanticFieldState || (KnownSemanticFieldState = {}));
//# sourceMappingURL=index.js.map
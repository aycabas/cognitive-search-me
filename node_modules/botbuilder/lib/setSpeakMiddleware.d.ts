import { Middleware, TurnContext } from 'botbuilder-core';
/**
 * Support the DirectLine speech and telephony channels to ensure the appropriate SSML tags are set on the
 * Activity Speak property.
 */
export declare class SetSpeakMiddleware implements Middleware {
    private readonly voiceName;
    private readonly fallbackToTextForSpeak;
    /**
     * Initializes a new instance of the SetSpeakMiddleware class.
     *
     * @param voiceName The SSML voice name attribute value.
     * @param fallbackToTextForSpeak true if an empty Activity.Speak is populated with Activity.Text.
     */
    constructor(voiceName: string | null, fallbackToTextForSpeak: boolean);
    /**
     * Processes an incoming activity.
     *
     * @param turnContext The context object for this turn.
     * @param next The delegate to call to continue the bot middleware pipeline.
     * @returns A promise representing the async operation.
     */
    onTurn(turnContext: TurnContext, next: () => Promise<void>): Promise<void>;
}
//# sourceMappingURL=setSpeakMiddleware.d.ts.map
import { ClaimsIdentity } from 'botframework-connector';
import { Activity, BotAdapter, ChannelAccount, ResourceResponse, SkillConversationIdFactoryBase, TurnContext } from 'botbuilder-core';
/**
 * @internal
 */
export declare class SkillHandlerImpl {
    private readonly skillConversationReferenceKey;
    private readonly adapter;
    private readonly logic;
    private readonly conversationIdFactory;
    private readonly getOauthScope;
    /**
     * @internal
     */
    constructor(skillConversationReferenceKey: symbol, adapter: BotAdapter, logic: (context: TurnContext) => Promise<void>, conversationIdFactory: SkillConversationIdFactoryBase, getOauthScope?: () => string | undefined);
    /**
     * @internal
     */
    onSendToConversation(claimsIdentity: ClaimsIdentity, conversationId: string, activity: Activity): Promise<ResourceResponse>;
    /**
     * @internal
     */
    onReplyToActivity(claimsIdentity: ClaimsIdentity, conversationId: string, activityId: string, activity: Activity): Promise<ResourceResponse>;
    /**
     * @internal
     */
    onUpdateActivity(claimsIdentity: ClaimsIdentity, conversationId: string, activityId: string, activity: Activity): Promise<ResourceResponse>;
    /**
     * @internal
     */
    onDeleteActivity(claimsIdentity: ClaimsIdentity, conversationId: string, activityId: string): Promise<void>;
    /**
     * @internal
     */
    onGetMember(claimsIdentity: ClaimsIdentity, userId: string, conversationId: string): Promise<ChannelAccount>;
    private getSkillConversationReference;
    private processActivity;
    private continueConversation;
    private applySkillActivityToTurnContext;
}
//# sourceMappingURL=skillHandlerImpl.d.ts.map
